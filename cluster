Docker Cluster = Swarm (tool provided by docker)

condition:
  Suppose when we have single host on which container multiple are running
    challanges faced :-
      - 1 Limited resources , if want to increase the resource then we have to do vertical scaling
      - 2 Down-Time
      - 3 SPOF(single point of failure)
    
  when we are having the multiple hosts on which multiple containers are running , 
    here we are doing the horizonal scaling (multiples hosts, eg., A(worker node), B(worker node) ...
    for managing this worker nodes we required the manager or master node
  when all this woring together to achieve one task, this team technically known as cluster (ther are managing container caleed as container cluster)
   for cerating any cluster we requried software(tool) their are various tools available in market (cluster management tool)
    one of the famous tool is Kubernetes, swarm
  here we are learning swarm , swarm is a tool come from docker ,, kubernetes is a third parthy management tool

**************************************************************************************************************************************
Creating the Swarm Cluster
  1. Manager/ master node
  2. multiple slave node


Initalinsizing a swarm in master/ manager node # docker swarm init -h
    # docker swarm init --advertise-addr (master IP)     // ater running this command it automatically become master node
    # docker node ls

after this the master/manager will give you command (# docker swarm join --tok.........) copy this command and paste in worker node 
that's set == horizonta scaling

#docker info,#docker node ls


for lauching container in swarm :
    # docker service ls 
    # docker service create --name webserver httpd
    # docker service ps webserver

*************************************************************************************************************************************
Swarm Replication

 Condition:
    when you hve run your website in a conainer suppose cantainer has capability to handle 100 clents,
    if 101 clients comes than webside goes down here the concep come of replica it will launch exactly same copy of container
    this is also called the horizontal scaling they creating muitple replicas
      from swarm prespective container is a TASK
      for Docker prespective it is a container and 
      for realastic prespective it is a process

Load Balancing: 
    - A load balancer is aa device in betn client and servers ensuring that all resource servers are used equally.
    - swarm will give you pre creaded load balancing (PRE SETUP LOAD BALANCER)  
    - whenever you want to launch a task swarm will always launch a one service for you i.e., almost equal to load balancer
  - by default service is isolated to expose it in to outside world have use port
      # docker service create --name myweb  --publish 8080:80 httpd

pratical: 
31-2-3    # docker service create --name myweb --publish 8080:80 vimal10/apache-webserver-php 
        // using this image eew will get to know on whch cantainer our webside is running


          # docker service scale myweb=5
          Adding scale out
          Decreasing Sacale In
Tis Concep technically known as Orcherstration (managing container here and there is known as orcherestraon )
***********************************************************************************************************************************
Distributed N/W  # docker network inspect ingress , # docker network inspect (network name )

one single network distrubutd among the multiples nodes to have the connectivity
(eg., if 3 tier arch we want the connectivity in database and webside if they launch on different-different engine)

Docker having capabilty to create this network we will requried a driver
      Driver --> overlay (it will create a distrubuted network)
Different - different docker engine cnnectivity will manged by overlay network
swarm automatically create a overlay network as you exyent the worker node automaticaly distrubuted network will extend

creating overlay network:
  # docker network create --driver overlay  (network name=mylwoverlay) 
  # docker network create --opt encrpted --driver overlay mysecnet //we have make this network encrypyed 
  # docker network ls 
  # docker netwrk inspect mysecnet

creating the service using your network :
  # docker service create --name myweb --publish 8080:80 --network mylwoverlay vimal13/apache-webserver-php
  # docker service create --name myweb --publish 8080:80 --network mysecnet --replicas 2 vimal13/apache-webserver-php
behind the overlay their is a VXLAN is used
**************************************************************************************************************************************
Integrating Swarm and docker-compose

  - swarm is a cluster used in multple nodes but docker-compose can automate in a single system only can not be used for multiple nodes
  - docker having a capabi;lity # docker --help

    we can automate things using docker-compose file and stack
   # docker stack ls
   GET THE COMPOSE FILE = DOCS.DOCKER.COM/ENGINE/SWARM/STACK-DEPLOY/
   # docker stack deploy --compose-file docker-compose.yml (stack name=mypyapp)
   # docker stack ls 
**************************************************************************************************************************************
High Availability (HA) to the Manager node

Benefits
  - Any where any fault happens this set up can tolerate fault == Fault-Tolerance
if you want to join the pervious cluster to increce the HA , use this commands in Master/Manager node
    # docker swarm join-token manager

Raft(Raft Consensum Algo) is a prtocl which share the information between two nodes
Quorum is a formula which helps us to do election on selecting the next manager node if first one gets down
fault tolerance formula (N-1)/2

in docker there is promote and demote options used in nodes to make the manager/worker or remove it 
*************************************************************************************************************************************
How to give or change that Manager node also work as worker node to manage the load(leader will slow down/ cluster will slow down)  we can remove the manager node as worker node 
# docker node update -h 
# docker node update --availability drain HOSTNAME   // drain means stop that cantainer or dont work as worker node 
drain means any container runing will stop and no cantainer will run, it will works as pure *manager only node*
it also use in worker node as maintaince by stoping the node 
**************************************************************************************************************************************
